export HISTIGNORE="*security add-generic-password*"
alias s='source ~/.zshrc'
alias cd="z"
alias lzg='lazygit'
cfg() { command git --git-dir="$HOME/.dotfiles/" --work-tree="$HOME" "$@"; }
git() {
    if [ "$(pwd)" = "$HOME" ]; then
        cfg "$@"
    else
        command git "$@"
    fi
}
dot() {
    url="https://github.com/pduchnovsky/dotfiles"
    if [[ "$(uname)" == "Darwin" ]]; then
        open -a "Vivaldi" "$url"
    elif grep -qiE "(Microsoft|WSL)" /proc/version 2>/dev/null; then
        "/mnt/c/Program Files (x86)/Vivaldi/Application/vivaldi.exe" "$url"
    elif command -v xdg-open &>/dev/null; then
        xdg-open "$url"
    fi
}
if [ "$(uname)" = "Darwin" ]; then
    alias sed='gsed'
    updpw() { bash -c 'security delete-generic-password -a "$USER" -s USER_PASSWORD >/dev/null 2>&1; read -s -p "Password: " pw; security add-generic-password -a $USER -s USER_PASSWORD -w "$pw"'; }
    # Secrets read
    export USER_PASSWORD=$(security find-generic-password -a $USER -s USER_PASSWORD -w)         # xxxxxxxxxxxxxxx
    export LAN_ADDR=$(security find-generic-password -a $USER -s LAN_ADDR -w)                   # xx.xxx.xx
    export PATH_ADDR=$(security find-generic-password -a $USER -s PATH_ADDR -w)                 # xxx.xx-xx.xxx
    export PROXY_ADDR=$(security find-generic-password -a $USER -s PROXY_ADDR -w)               # x.x.x.x
    export SN_PASS=$(security find-generic-password -a $USER -s SN_PASS -w)                     # xxxxxxxxxxxxxxx
    export JIRA_URL=$(security find-generic-password -a $USER -s JIRA_URL -w)                   # xxxx.x-xxx.xxx
    export JIRA_TOKEN=$(security find-generic-password -a $USER -s JIRA_TOKEN -w)               # xxxxxxxxxxxxxxx
    export CORP_DOMAIN=$(security find-generic-password -a $USER -s CORP_DOMAIN -w)             # x-xxx.xxx
    export BITBUCKET_TOKEN=$(security find-generic-password -a $USER -s BITBUCKET_TOKEN -w)     # xxxxxxxxxxxxxxx
    export BITBUCKET_ADDRESS=$(security find-generic-password -a $USER -s BITBUCKET_ADDRESS -w) # xxxxxx.x-xxx.xxx

    # SSH via PATH
    sshviapath() { ssh $USER@$1@ssh.$PATH_ADDR; }
    alias tffat1='sshviapath ad_alice@terraboxatf1.'$LAN_ADDR''
    alias tffat2='sshviapath ad_alice@terraboxatf2.'$LAN_ADDR''
    alias tfprod1='sshviapath ad_alice@terraboxatp1.'$LAN_ADDR''
    alias tfprod2='sshviapath ad_alice@terraboxatp2.'$LAN_ADDR''
fi

tf() { terraform $@; }
bu() {
    if ping -c1 -W1 $PROXY_ADDR &>/dev/null; then
        ALL_PROXY=socks5://$PROXY_ADDR:5678 brew upgrade --greedy
    else
        brew upgrade --greedy
    fi
}
bb() { brew bundle dump -f && sed -i '/^vscode/d' Brewfile; }
br() {
    for pkg in "$@"; do
        if brew info --cask "$pkg" &>/dev/null; then
            brew uninstall --zap --cask -f "$pkg"
        else
            brew uninstall --zap -f "$pkg"
        fi
    done
}
ggo() {
    open $(git remote get-url origin | awk -F'[:@/]' '{sub(/\.git$/, "", $8); print "https://"$5"/projects/"$7"/repos/"$8}')
}
fr() {
    clonerepo() {
        OPT=$([ "$1" = sol ] && echo ".solution_projects/" || echo "")
        PROJECTS_ARRAY=()
        read -a projects_array <<<"$PROJECTS" 2>/dev/null || read -A projects_array <<<"$PROJECTS"
        for project in "${projects_array[@]}"; do
            PROJECTS_ARRAY+=("https://$BITBUCKET_ADDRESS/rest/api/1.0/projects/$project/repos?limit=1000")
        done
        TARGET=$(printf "%s\n" "${PROJECTS_ARRAY[@]}" |
            xargs -P10 -n1 curl -ks -u "${USER}:$BITBUCKET_TOKEN" |
            jq -r '.values|.[] | "\(.project.key)/\(.name)"' | fzf)
        [[ ! -d "$HOME/repos/${OPT}${TARGET}" ]] && git clone "ssh://git@$BITBUCKET_ADDRESS:7999/$TARGET.git" "$HOME/repos/${OPT}${TARGET}"
        cd "$HOME/repos/${OPT}${TARGET}"
    }
    case "$1" in
    sol)
        SOL_FACTORY_PROJECT=terraform-gcp-factory-solution-project
        [[ ! -d "$HOME/repos/HORIZON/$SOL_FACTORY_PROJECT" ]] &&
            git clone "ssh://git@$BITBUCKET_ADDRESS:7999/HORIZON/$SOL_FACTORY_PROJECT.git" "$HOME/repos/HORIZON/$SOL_FACTORY_PROJECT"
        PROJECTS=$(find "$HOME/repos/HORIZON/$SOL_FACTORY_PROJECT/organization" -type f -name '*.yaml' -print0 |
            xargs -0 -I % sh -c 'yq -o json "%" | jq -r .vcs_project' |
            tr '[:lower:]' '[:upper:]' | sort -u | grep -v NULL | xargs)
        clonerepo sol
        ;;
    '')
        PROJECTS="HORIZON TFE-GCP-MODULES CS-ATRON"
        clonerepo
        ;;
    *)
        PROJECTS="$*"
        clonerepo
        ;;
    esac
}
adm() {
    case "$1" in
    "add")
        sudo /usr/sbin/dseditgroup -o edit -a $USER -t user admin
        ;;
    "rm")
        sudo /usr/sbin/dseditgroup -o edit -d $USER -t user admin
        ;;
    esac
}
cg() {
    for repo in $(find ~/repos -name '.git' -type d); do
        echo $repo
        git --git-dir="$repo" --work-tree="$repo/.." fetch -p >/dev/null && git --git-dir="$repo" --work-tree="$repo/.." gc >/dev/null 2>&1
        for branch in $(git --git-dir="$repo" --work-tree="$repo/.." for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do
            git --git-dir="$repo" --work-tree="$repo/.." branch -D $branch
        done
    done
}
sync() {
    case "$1" in
    "")
        git fetch --all --prune -a
        (git pull --recurse-submodules 2>/dev/null) | grep "Updated branch"
        git branch -vv | awk "/: gone]/ {print \$1}" | xargs -r git branch -d
        ;;
    *)
        head_branch=$(git remote show $1 | grep "HEAD branch:" | awk '{print $3}')
        git fetch --prune -a $1
        git merge $1/$head_branch --no-commit --strategy-option theirs
        git submodule update --recursive
        ;;
    esac
}
syncall() {
    find ~/repos -name '.git' -type d | xargs -S1024 -P 15 -I {} bash -c "
        git --git-dir={} --work-tree={}/.. fetch --all --prune 2>/dev/null
        (git --git-dir={} --work-tree={}/.. pull --recurse-submodules 2>/dev/null) | grep Updated
        git --git-dir={} --work-tree={}/.. branch -vv | awk \"/: gone]/ {print \$1}\" | xargs -r git branch -d
    "
}
rebase() { git fetch origin && git rebase origin/$1; }
push() {
    if [[ $# -eq 0 ]]; then
        read -p "Commit description: " desc
    else
        desc="$@"
    fi
    if [ "$(pwd)" = "$HOME" ]; then
        cfg commit -a --allow-empty-message -m "$desc" && cfg push
    else
        git add . && git add . && git commit -a --allow-empty-message -m "$desc" && git push
    fi
}
task() {
    # set -x
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    reset=$(tput sgr0)

    if [[ -z "${JIRA_TOKEN}" ]]; then
        echo "Missing env. variable JIRA_TOKEN"
    else
        CMD=$(echo curl -k --url "https://${JIRA_URL}/rest/api/2/issue" \
            --header "Authorization: Bearer ${JIRA_TOKEN}" \
            --header "Accept: application/json" \
            --header "Content-Type: application/json" \
            --data '{
        "fields":
          {
            "project": {"key": "CEP"},
            "summary": "'"${*}"'",
            "description": "'"${*}"'",
            "issuetype": {"id": "6"}, 
            "labels": ["SRE"]
          }
        }')

        echo "$(echo ${CMD} | sed -E 's/Bearer [a-zA-Z0-9]+/Bearer *****/')"
        echo
        echo "Would you like to ${green}execute above cURL${reset} call ${red}[y|Y|yes]${reset} or ${green}[n|no|N]${reset}?"
        read choice

        case "$choice" in
        y | Y | yes | Yes)
            # set -x
            echo "Executing."
            KEY=$(curl -s -k --url "https://${JIRA_URL}/rest/api/2/issue" \
                --header "Authorization: Bearer ${JIRA_TOKEN}" \
                --header "Accept: application/json" \
                --header "Content-Type: application/json" \
                --data '{
          "fields":
            {
              "project": {"key": "CEP"},
              "summary": "'"${*}"'",
              "description": "'"${*}"'",
              "issuetype": {"id": "6"}, 
              "labels": ["SRE"]
            }
          }' | jq -r '.key')

            text=$(echo "${*}" | tr " " "-")
            echo "https://${JIRA_URL}/browse/${KEY}"
            echo "git checkout -b feature/${KEY}-${text}"
            echo "git commit -m \"${KEY} ${*}\""
            echo -e "
        git checkout -b feature/${KEY}-${text}
        git commit -m \"${KEY} ${*}\"
        " | pbcopy

            ;;
        n | N | no) echo "No cURL call was executed" ;;
        *) echo "invalid" ;;
        esac
    fi
}
sol() {
    for i in $(find ./organization/*/*/* -type f -name "*.yaml" | xargs -I % sh -c 'echo %'); do
        FN=${i##*/}
        echo "${i}"
        # done | fzf --preview 'bat {1}' | xargs -I % sh -c '$EDITOR %; echo %; echo % | pbcopy'
    done >/tmp/solutions.txt

    export BAT_THEME='gruvbox-dark'
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case < /tmp/solutions.txt"

    INITIAL_QUERY="${*:-}"
    : | fzf --ansi --disabled --query "$INITIAL_QUERY" \
        --bind "start:reload:$RG_PREFIX {q}" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --bind "alt-enter:unbind(change,alt-enter)+change-prompt(2. fzf> )+enable-search+clear-query" \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --prompt '1. ripgrep> ' \
        --delimiter ': ' \
        --preview 'bat --color=always -l yaml $(FILE={1}; echo ${FILE#*/})' \
        --preview-window 'up,80%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become(code $(FILE={1}; echo ${FILE#*/}); echo $(FILE={1}; echo ${FILE#*/}); echo $(FILE={1}; echo ${FILE#*/}) | pbcopy)'
}
presentation() {
    if [[ -z "${JIRA_TOKEN}" ]]; then
        echo "Missing env. variable JIRA_TOKEN"
    else
        red=$(tput setaf 1)
        green=$(tput setaf 2)
        reset=$(tput sgr0)

        JIRA_BOARD="4136" # Horizon Sprint Board identifier
        JIRA_CURRENT_SPRINT=$(curl -s -k --header 'Accept: application/json' \
            --header "Authorization: Bearer ${JIRA_TOKEN}" \
            --request GET --url "https://${JIRA_URL}/rest/agile/1.0/board/${JIRA_BOARD}/sprint?state=active" | jq '.values | .[].id')
        JIRA_CURRENT_SPRINT_GOAL=$(curl -s -k --header 'Accept: application/json' \
            --header "Authorization: Bearer ${JIRA_TOKEN}" \
            --request GET --url "https://${JIRA_URL}/rest/agile/1.0/board/${JIRA_BOARD}/sprint?state=active" | jq -r '.values | .[].goal')

        JIRA_CURRENT_SPRINT_NAME=$(curl -s -k --header 'Accept: application/json' \
            --header "Authorization: Bearer ${JIRA_TOKEN}" \
            --request GET --url "https://${JIRA_URL}/rest/agile/1.0/board/${JIRA_BOARD}/sprint?state=active" | jq -r '.values | .[].name')

        export MAX_ENTRIES="1000"

        echo "${green}Sprint Goal${reset}: ${JIRA_CURRENT_SPRINT_GOAL}"
        echo "${green}Sprint Name${reset}: ${JIRA_CURRENT_SPRINT_NAME}"

        echo "${green}Stories:${reset}"
        curl -s -k --header 'Accept: application/json' \
            --header "Authorization: Bearer ${JIRA_TOKEN}" \
            --request GET --url "https://${JIRA_URL}/rest/agile/1.0/board/${JIRA_BOARD}/sprint/${JIRA_CURRENT_SPRINT}/issue?startAt=0&maxResults=${MAX_ENTRIES}" |
            jq -r '.issues | .[] | select(.fields.issuetype.name=="Story" and .fields.status.statusCategory.name=="Done") |
          (
              {
                "key": ("* " + .key),
                "summary": (.fields.summary),
                "assignee": ("[" + .fields.assignee.emailAddress | split(".")[0] + "]")
              }
              )' | jq -sr '. |=sort_by(.assignee) | .[] | join(" ")'

        echo "${green}Worth to mention:${reset}"
        curl -s -k --header 'Accept: application/json' \
            --header "Authorization: Bearer ${JIRA_TOKEN}" \
            --request GET --url "https://${JIRA_URL}/rest/agile/1.0/board/${JIRA_BOARD}/sprint/${JIRA_CURRENT_SPRINT}/issue?startAt=0&maxResults=${MAX_ENTRIES}" |
            jq -r '.issues | .[] | select(.fields.issuetype.name=="Task") |
          (
              {
                "key": ("* " + .key),
                "summary": (.fields.summary),
                "assignee": ("[" + .fields.assignee.emailAddress | split(".")[0] + "]")
              }
              )' | jq -sr '. |=sort_by(.assignee) | .[] | join(" ")'
    fi

}

# Personal
alias 1='ssh server'
alias 2='ssh server2'
test() {
    if [[ "$PWD" == "$HOME/repos/.pd/duchnovsky.com" ]]; then
        if [[ "$(uname)" == "Darwin" ]]; then
            (sleep 1 && open -a "Vivaldi" https://localhost:3560) &
        elif grep -qEi "(Microsoft|WSL)" /proc/version &>/dev/null; then
            (sleep 1 && /mnt/c/Program\ Files\ \(x86\)/Vivaldi/Application/vivaldi.exe https://localhost:3560) &
        fi
        hugo serve -p 3560 --tlsAuto --buildFuture
    fi
}
